// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String?
  role            UserRole  @default(USER)
  age             Int?
  gender          String?
  location        String?
  bio             String?   @db.Text
  profileComplete Boolean   @default(false)
  images          Image[]
  interests       Interest[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  sentLikes       Like[]    @relation("SentLikes")
  receivedLikes   Like[]    @relation("ReceivedLikes")
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Interest {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, name])
}

model Like {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  isMatched   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  sender      User     @relation("SentLikes", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedLikes", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  senderId    String
  receiverId  String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model AdSetting {
  id                String  @id @default(cuid())
  bannerEnabled     Boolean @default(true)
  interstitialEnabled Boolean @default(true)
  bannerFrequency   Int     @default(3)
  interstitialFrequency Int  @default(5)
  adSenseClientId   String?
  adMobAppId        String?
  updatedAt         DateTime @updatedAt
}
